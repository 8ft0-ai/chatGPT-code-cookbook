{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>A cookbook for using chatGPT python based code interpreter</p>"},{"location":"image%20creation/multiple%20images/","title":"Create Multiple Images with a Single Prompt","text":"<p>ChatGPT is good at creating imaages using DALL-E, but it only creates 1 or 2 at a time. This simple trick will let you create a batch of images with a single prompt</p> <p>Prompt</p> <p>Let's create 10 images of cats <pre><code>Loop 10 times\n- Create an image of a cat and save it to a file\n</code></pre></p> <p>Response</p> <p>I'm not going to include all 10 images here, but you should get the idea.</p> <p> <pre><code>The first cat image has been successfully generated and saved.\n\n...\n\nThe ninth cat image has been generated and saved,\n\nProceeding with the creation of the final, tenth image.\n\nThe tenth and final cat image has been generated and saved, \n\nAll ten images have now been successfully created and stored. If there's anything more you'd like to do with these images or any other assistance you need, please let me know!\n</code></pre></p>"},{"location":"image%20creation/multiple%20images/#list-the-files","title":"List the Files","text":"<p>Prompt</p> <p>verify that the files have been saved</p> <pre><code>List all the files\n</code></pre> <p>Response</p> <pre><code>Here are the files that have been generated and saved:\n\n1. An_image_of_a_majestic_Siamese_cat_sitting_with_an.png\n2. A_realistic_image_of_a_domestic_cat_sitting_calmly.png\n3. A_serene_image_of_a_long-haired_white_cat_lying_gr.png\n4. An_image_of_a_playful_kitten_with_striking_blue_ey.png\n5. A_whimsical_image_of_a_kitten_chasing_a_fluttering.png\n6. A_captivating_image_of_a_Bengal_cat,_its_coat_a_vi.png\n7. A_detailed_image_of_a_cat_lounging_in_sunlight,_sh.png\n8. A_heartwarming_scene_of_a_mother_cat_with_her_litt.png\n9. An_enchanting_image_of_a_fluffy_Persian_cat,_with_.png\n10. A_serene_portrait_of_a_grey_tabby_cat_sitting_atop.png\n\nEach file corresponds to one of the cat images created. If you need further assistance with these files or have any other requests, feel free to let me know.\n</code></pre>"},{"location":"image%20creation/multiple%20images/#utilizing-chatgpt-for-image-generation","title":"Utilizing ChatGPT for Image Generation","text":"<p>This case study explores the innovative use of ChatGPT in conjunction with DALL\u00b7E, OpenAI's state-of-the-art image generation model, to automate the creation of a series of images. The task involved generating ten distinct images of cats, each described with specific characteristics to ensure a variety of styles and settings. This exercise demonstrates the synergy between natural language processing (NLP) and image generation technologies, offering insights into their potential for streamlining content creation in digital media.</p>"},{"location":"image%20creation/multiple%20images/#objective","title":"Objective","text":"<p>The primary objective was to leverage ChatGPT's capability to interpret and execute commands related to image generation using DALL\u00b7E. This involved creating ten unique images of cats based on detailed descriptions, showcasing the versatility and precision of AI-driven creative processes.</p>"},{"location":"image%20creation/multiple%20images/#methodology","title":"Methodology","text":"<ol> <li> <p>Command Interpretation: The session began with ChatGPT interpreting the user's request to generate ten images of cats, each with its distinct characteristics. This required a clear understanding of the task and the ability to translate descriptions into detailed prompts for DALL\u00b7E.</p> </li> <li> <p>Image Generation with DALL\u00b7E: For each image, ChatGPT crafted a unique prompt that encapsulated the user's specifications, ranging from the cat's fur colour and texture to its environment and activities. These prompts were then processed by DALL\u00b7E to create images that matched the descriptions as closely as possible.</p> </li> <li> <p>Iteration and Storage: The process was iteratively executed ten times, with each cycle involving the generation of an image followed by its storage. This demonstrated the model's ability to handle repetitive tasks efficiently while maintaining a high standard of creativity and adherence to the given descriptions.</p> </li> <li> <p>File Management: Upon the completion of each image generation, the files were automatically saved with descriptive names, facilitating easy identification and retrieval. This aspect of the task highlighted the integration of file management operations within the AI-driven workflow.</p> </li> </ol>"},{"location":"image%20creation/multiple%20images/#results","title":"Results","text":"<p>The exercise resulted in the successful generation and storage of ten high-quality images, each reflecting the specified attributes and settings. The images showcased a wide range of artistic renditions of cats, from playful kittens to serene portraits, demonstrating the model's versatility and the richness of its creative capabilities.</p>"},{"location":"image%20creation/multiple%20images/#discussion","title":"Discussion","text":"<p>This case study illustrates the potential of combining NLP and image generation technologies to automate and enhance creative processes. The ability of ChatGPT to interpret complex commands and utilise DALL\u00b7E for image generation opens up new avenues for content creation across various domains, including digital media, advertising, and educational resources.</p> <p>Furthermore, the workflow exemplifies how AI can support repetitive and detailed-oriented tasks, reducing the time and effort required by humans. It also highlights the importance of precise language and clear specifications in achieving desired outcomes when interacting with AI models.</p>"},{"location":"image%20creation/multiple%20images/#conclusion","title":"Conclusion","text":"<p>The integration of ChatGPT and DALL\u00b7E for automated image generation represents a significant advancement in the field of AI. This case study not only showcases the practical application of these technologies but also highlights their potential to revolutionize content creation. As AI continues to evolve, the synergy between language processing and image generation models will undoubtedly offer even more innovative solutions to creative challenges.</p>"},{"location":"image%20creation/video%20slideshow%20with%20transitions/","title":"Create a Video Slideshow with Transitions","text":"<p>This builds on from creating multiple images </p>"},{"location":"image%20creation/video%20slideshow%20with%20transitions/#adding-video-transitions","title":"Adding Video Transitions","text":"<p>Adding transitions requires a higher frames per second. This can result in the video creation taking longer than 60 seconds (this is the maximum time for a ChatGPT 'execution'). You'll need to experiment with fps settings and number of images in order to get the task to complete in under 60 seconds.</p> <pre><code>- make it 3 seconds per image\n- add video transitions\n- 6 frames per second\n- use first 3 images only\n</code></pre>"},{"location":"image%20creation/video%20slideshow%20with%20transitions/#result","title":"Result","text":"Your browser does not support the video tag."},{"location":"image%20creation/video%20slideshow%20with%20transitions/#under-the-hood","title":"Under the hood","text":"<p>This is how ChatGPT handled the video slideshow creation</p> <pre><code>from moviepy.editor import ImageClip, concatenate_videoclips, vfx\n\n# Re-defining the paths to the first three images\nimage_paths = [\n    \"/mnt/data/A_detailed_portrait_of_a_cat,_looking_directly_at_.png\",\n    \"/mnt/data/A_detailed_portrait_of_a_cat_in_a_playful_pose,_wi.png\",\n    \"/mnt/data/A_serene_portrait_of_a_cat_sitting_by_a_window,_wi.png\"\n]\n\n# Creating clips with 2 seconds duration each\nclips = [ImageClip(path).set_duration(2) for path in image_paths]\n\n# Applying fade in and fade out transitions for each clip\nfor i, clip in enumerate(clips):\n    clips[i] = clip.fx(vfx.fadein, 1).fx(vfx.fadeout, 1)\n\n# Concatenating the clips with crossfade transition\nfinal_clip = concatenate_videoclips(clips, method=\"compose\", padding=-1)\n\n# Writing the video file with 2 seconds per image, transitions, and at 6 fps\noutput_path_with_transitions = \"/mnt/data/cat_images_video_3imgs_2s_transitions_6fps.mp4\"\nfinal_clip.write_videofile(output_path_with_transitions, fps=6)\n</code></pre>"},{"location":"image%20creation/video%20slideshow/","title":"Create a Video Slideshow","text":"<p>This builds on from multiple images</p> <p>Prompt</p> <pre><code>loop 5\n  create_image()\nend loop\n\ncreate_video()\n\nend\n---\n\ndef create_image()\n  - using DALL-E\n    - Create an image of a cat and save it to a file\n      - height: 1792\n      - width: 1024\n\ndef create_video()\n  - using code interpeter\n    - Assemble the images into a video:\n      - Max 1 second per image\n</code></pre> <p>Response</p> <pre><code>Based on your request, I'll begin by creating images of a cat using DALL-E. After creating the images, we'll proceed to the video assembly step.\n\nLet's start with generating the images of a cat.\n\n...\n\nThe first image of a cat has been successfully generated and saved.\n\nNow, I'll proceed to generate the remaining four images as per your loop instruction.\n\n...\n\nWith all five images created, the next step is to assemble them into a video. As specified, the video should have a maximum of 1 second per image with transitions. Let's proceed with creating the video.\n\nThe video assembling the images into a sequence with transitions has been successfully created. You can download the video using the following link:\n\nDownload the video \u200b\n</code></pre>"},{"location":"image%20creation/video%20slideshow/#result","title":"Result","text":"Your browser does not support the video tag.  <p>Next Step: Adding Transitions</p>"},{"location":"image%20creation/video%20slideshow/#under-the-hood","title":"Under the hood","text":"<p>This is how ChatGPT handled the video slideshow creation</p> <pre><code>from moviepy.editor import ImageClip, concatenate_videoclips\n\n# Define the paths to the images\nimage_paths = [\n    \"/mnt/data/A_detailed_portrait_of_a_cat,_looking_directly_at_.png\",\n    \"/mnt/data/A_detailed_portrait_of_a_cat_in_a_playful_pose,_wi.png\",\n    \"/mnt/data/A_serene_portrait_of_a_cat_sitting_by_a_window,_wi.png\",\n    \"/mnt/data/An_image_of_a_cat_curled_up_and_sleeping_peacefull.png\",\n    \"/mnt/data/A_majestic_portrait_of_a_cat_with_a_striking_gaze,.png\"\n]\n\n# Create a list to hold the clips\nclips = []\n\n# Iterate through the image paths, creating a clip for each\nfor path in image_paths:\n    clip = ImageClip(path).set_duration(1)  # 1 second per image\n    clips.append(clip)\n\n# Concatenate the clips into a single video\nfinal_clip = concatenate_videoclips(clips, method=\"compose\")\n\n# Output file path\noutput_path = \"/mnt/data/cat_images_video.mp4\"\n\n# Write the video file to disk\nfinal_clip.write_videofile(output_path, fps=24)  # 24 frames per second\n\noutput_path\n</code></pre>"},{"location":"image%20creation/video%20slideshow/#leveraging-chatgpt-for-real-time-coding-assistance-a-review","title":"Leveraging ChatGPT for Real-Time Coding Assistance: A Review","text":"<p>This article presents a case study of utilizing ChatGPT, an advanced AI language model, as an interactive coding assistant. The article showcases how ChatGPT can be instrumental in guiding through complex coding tasks, specifically in creating a video from images with transitions using Python. This example serves as a testament to the potential of integrating AI-driven tools into the programming process for enhanced productivity and creativity.</p>"},{"location":"image%20creation/video%20slideshow/#introduction-to-chatgpt","title":"Introduction to ChatGPT","text":"<p>ChatGPT, developed by OpenAI, is a state-of-the-art language model capable of understanding and generating human-like text based on the input it receives. Its versatility allows it to assist with a wide range of tasks, from answering queries and offering explanations to providing coding assistance and debugging help. In this session, we explore how ChatGPT can aid in a specific programming task: assembling a series of images into a video with custom transitions and frame rates using Python.</p>"},{"location":"image%20creation/video%20slideshow/#the-task-creating-a-video-from-images","title":"The Task: Creating a Video from Images","text":"<p>The goal was to create a video from a set of images, each displayed for a specified duration, with smooth transitions between them, and set to a specific frame rate. This task involved using the Python library MoviePy, which provides a high-level interface for video editing.</p>"},{"location":"image%20creation/video%20slideshow/#step-by-step-guidance","title":"Step-by-Step Guidance","text":"<p>1. Defining the Problem: The user presented the task, specifying the requirements for image duration, transition effects, and frame rate.</p> <p>2. Selecting the Tools: ChatGPT recommended the MoviePy library for this task, considering its suitability for video processing and editing in Python.</p> <p>3. Generating Code: ChatGPT provided step-by-step Python code snippets to accomplish the task. This included loading images, setting durations, adding transitions, and compiling them into a video. It showcased the use of <code>ImageClip</code>, <code>concatenate_videoclips</code>, and <code>vfx</code> modules for these purposes.</p> <p>4. Debugging and Optimization: When the initial attempt to create the video with transitions exceeded the execution time limits, ChatGPT suggested modifications to simplify the process. It demonstrated adaptability by scaling down the task to work within the constraints, focusing on a smaller set of images to ensure successful execution.</p> <p>5. Finalization: Upon successfully creating the video with the desired specifications, ChatGPT provided the user with a direct download link to the output file.</p>"},{"location":"image%20creation/video%20slideshow/#key-takeaways","title":"Key Takeaways","text":"<p>Interactive Problem-Solving: This session highlighted how ChatGPT could actively participate in the problem-solving process, offering a conversational approach to debugging and code optimization.</p> <p>Educational Value: For beginners and seasoned developers alike, the interactive guidance provided by ChatGPT serves as an educational tool, offering insights into coding practices, library usage, and troubleshooting techniques.</p> <p>Rapid Prototyping: ChatGPT facilitated rapid prototyping by generating code snippets that users could immediately test and modify, significantly speeding up the development process.</p> <p>Versatility: The session underscored ChatGPT's versatility in handling a range of tasks, from simple code generation to addressing complex programming challenges.</p>"},{"location":"image%20creation/video%20slideshow/#conclusion","title":"Conclusion","text":"<p>Integrating ChatGPT into the programming workflow can significantly enhance productivity, learning, and problem-solving efficiency. This case study exemplifies how AI-driven tools like ChatGPT can transform the way developers approach coding tasks, offering real-time assistance that is both informative and actionable. As AI technologies continue to advance, their role in supporting and augmenting the coding process is set to become increasingly integral to software development practices.</p>"},{"location":"internals/list_python_libraries/","title":"List the installed python libraries","text":"<pre><code>pip freeze\n</code></pre>"},{"location":"internals/list_python_libraries/#library-modules","title":"Library Modules","text":"<p>(from STDOUT) <pre><code>absl-py==2.0.0\naffine==2.4.0\naiohttp==3.8.1\naiosignal==1.3.1\nanalytics-python==1.4.post1\nanyio==3.7.1\nanytree==2.8.0\nargcomplete==1.10.3\nargon2-cffi==23.1.0\nargon2-cffi-bindings==21.2.0\narviz==0.15.1\nasn1crypto==1.5.1\nasttokens==2.4.1\nasync-timeout==4.0.3\nattrs==23.1.0\naudioread==3.0.1\nBabel==2.14.0\nbackcall==0.2.0\nbackoff==1.10.0\nbackports.zoneinfo==0.2.1\nbasemap==1.3.2\nbasemap-data==1.3.2\nbcrypt==4.1.2\nbeautifulsoup4==4.8.2\nbleach==6.1.0\nblinker==1.7.0\nblis==0.7.11\nbokeh==2.4.0\nbranca==0.7.0\nBrotli==1.1.0\ncachetools==5.3.2\ncairocffi==1.6.1\nCairoSVG==2.5.2\ncamelot-py==0.10.1\ncatalogue==2.0.10\ncertifi==2019.11.28\ncffi==1.16.0\nchardet==4.0.0\ncharset-normalizer==2.1.1\nclick==8.1.7\nclick-plugins==1.1.1\ncligj==0.7.2\ncloudpickle==3.0.0\ncmudict==1.0.16\ncomm==0.2.0\ncompressed-rtf==1.0.6\ncountryinfo==0.1.2\ncryptography==3.4.8\ncssselect2==0.7.0\ncycler==0.12.1\ncymem==2.0.8\nCython==0.29.36\ndatabricks-sql-connector==0.9.1\ndbus-python==1.2.16\ndebugpy==1.8.0\ndecorator==4.4.2\ndefusedxml==0.7.1\ndeprecat==2.1.1\ndill==0.3.7\ndistro-info==0.23+ubuntu1.1\ndlib==19.22.1\ndnspython==2.4.2\ndocx2txt==0.8\nebcdic==1.1.1\nEbookLib==0.18\neinops==0.3.2\nemail-validator==2.1.0.post1\nentrypoints==0.4\net-xmlfile==1.1.0\nexceptiongroup==1.2.0\nexchange-calendars==3.4\nexecuting==2.0.1\nextract-msg==0.28.7\nFaker==8.13.2\nfastapi==0.95.2\nfastjsonschema==2.19.0\nfastprogress==1.0.3\nffmpeg-python==0.2.0\nffmpy==0.3.1\nfilelock==3.13.1\nFiona==1.8.20\nflask==3.0.0\nFlask-CacheBuster==1.0.0\nFlask-Cors==4.0.0\nFlask-Login==0.6.3\nfolium==0.12.1\nfonttools==4.47.0\nfpdf==1.7.2\nfrozenlist==1.4.1\nfuture==0.18.3\nfuzzywuzzy==0.18.0\ngensim==4.1.0\ngeographiclib==1.52\ngeopandas==0.10.2\ngeopy==2.2.0\ngradio==2.2.15\ngraphviz==0.17\ngTTS==2.2.3\nh11==0.14.0\nh2==4.1.0\nh5netcdf==1.1.0\nh5py==3.6.0\nhpack==4.0.0\nhtml5lib==1.1\nhttpcore==1.0.2\nhttptools==0.6.1\nhttpx==0.25.2\nhypercorn==0.14.3\nhyperframe==6.0.1\nidna==2.8\nimageio==2.33.1\nimageio-ffmpeg==0.4.9\nIMAPClient==2.1.0\nimgkit==1.2.2\nimportlib-metadata==7.0.0\nimportlib-resources==6.1.1\niniconfig==2.0.0\nipykernel==6.27.1\nipython==8.12.3\nipython-genutils==0.2.0\nisodate==0.6.1\nitsdangerous==2.1.2\njax==0.2.28\njedi==0.19.1\nJinja2==3.1.2\njoblib==1.3.2\njson5==0.9.14\njsonpickle==3.0.2\njsonschema==4.20.0\njsonschema-specifications==2023.11.2\njupyter-client==7.4.9\njupyter-core==5.1.3\njupyter-server==1.23.5\njupyterlab==3.4.8\njupyterlab-pygments==0.2.2\njupyterlab-server==2.19.0\nkeras==2.6.0\nkerykeion==2.1.16\nkiwisolver==1.4.5\nkorean-lunar-calendar==0.3.1\nlibrosa==0.8.1\nllvmlite==0.41.1\nloguru==0.5.3\nlxml==4.9.3\nmarkdown2==2.4.12\nmarkdownify==0.9.3\nMarkupSafe==2.1.3\nmatplotlib==3.4.3\nmatplotlib-inline==0.1.6\nmatplotlib-venn==0.11.6\nmistune==3.0.2\nmizani==0.9.3\nmne==0.23.4\nmonotonic==1.6\nmoviepy==1.0.3\nmpmath==1.3.0\nmtcnn==0.1.1\nmultidict==6.0.4\nmunch==4.0.0\nmurmurhash==1.0.10\nmutagen==1.45.1\nnashpy==0.0.35\nnbclassic==0.4.5\nnbclient==0.9.0\nnbconvert==7.13.0\nnbformat==5.9.2\nnest-asyncio==1.5.8\nnetworkx==2.6.3\nnltk==3.6.3\nnotebook==6.5.1\nnotebook-shim==0.2.3\nnumba==0.58.1\nnumexpr==2.8.6\nnumpy==1.21.2\nnumpy-financial==1.0.0\nodfpy==1.4.1\nolefile==0.47\nopencv-python==4.5.2.54\nopenpyxl==3.0.10\nopt-einsum==3.3.0\norjson==3.9.10\noscrypto==1.3.0\npackaging==23.2\npandas==1.3.2\npandocfilters==1.5.0\nparamiko==3.4.0\nparso==0.8.3\npathy==0.10.3\npatsy==0.5.4\npdf2image==1.16.3\npdfkit==0.6.1\npdfminer.six==20191110\npdfplumber==0.5.28\npdfrw==0.4\npexpect==4.9.0\npickleshare==0.7.5\nPillow==8.3.2\npkgutil-resolve-name==1.3.10\nplatformdirs==4.1.0\nplotly==5.3.0\nplotnine==0.10.1\npluggy==1.3.0\npooch==1.8.0\npreshed==3.0.9\npriority==2.0.0\nproglog==0.1.10\nprometheus-client==0.19.0\nprompt-toolkit==3.0.43\npronouncing==0.2.0\npsutil==5.9.7\nptyprocess==0.7.0\npure-eval==0.2.2\npy==1.11.0\nPyAudio==0.2.11\npycountry==20.7.3\npycparser==2.21\npycryptodome==3.19.0\npycryptodomex==3.19.0\npydantic==1.10.2\npydot==1.4.2\npydub==0.25.1\npydyf==0.8.0\npygments==2.17.2\nPyGObject==3.36.0\npygraphviz==1.7\nPyJWT==2.8.0\npylog==1.1\npyluach==2.2.0\npymc3==3.11.5\nPyMuPDF==1.19.6\nPyNaCl==1.5.0\npyOpenSSL==21.0.0\npypandoc==1.6.3\npyparsing==3.1.1\nPyPDF2==1.28.6\npyphen==0.14.0\npyproj==3.5.0\npyprover==0.5.6\npyshp==2.1.3\npyswisseph==2.10.3.2\npytesseract==0.3.8\npytest==6.2.5\npyth3==0.7\npython-apt==2.0.1+ubuntu0.20.4.1\npython-dateutil==2.8.2\npython-docx==0.8.11\npython-dotenv==1.0.0\npython-multipart==0.0.6\npython-pptx==0.6.21\npyttsx3==2.90\npytz==2023.3.post1\nPyWavelets==1.4.1\npyxlsb==1.0.8\nPyYAML==6.0.1\npyzbar==0.1.8\npyzmq==25.1.2\nqrcode==7.3\nrarfile==4.0\nrasterio==1.2.10\nrdflib==6.0.0\nreferencing==0.32.0\nregex==2023.10.3\nreportlab==3.6.1\nrequests==2.31.0\nrequests-unixsocket==0.2.0\nresampy==0.4.2\nrpds-py==0.15.2\nscikit-image==0.18.3\nscikit-learn==1.0\nscipy==1.7.1\nseaborn==0.11.2\nsemver==3.0.2\nSend2Trash==1.8.2\nsentencepiece==0.1.99\nshap==0.39.0\nShapely==1.7.1\nsix==1.14.0\nslicer==0.0.7\nsmart-open==6.4.0\nsniffio==1.3.0\nsnowflake-connector-python==2.7.12\nsnuggs==1.4.7\nsortedcontainers==2.4.0\nSoundFile==0.10.2\nsoupsieve==2.5\nspacy==3.1.6\nspacy-legacy==3.0.12\nSpeechRecognition==3.8.1\nsrsly==2.4.8\nstack-data==0.6.3\nstarlette==0.27.0\nstatsmodels==0.13.1\nsvglib==1.1.0\nsvgwrite==1.4.1\nsympy==1.8\ntables==3.6.1\ntabula==1.0.5\ntabulate==0.8.9\ntenacity==8.2.3\nterminado==0.18.0\ntext-unidecode==1.3\ntextblob==0.15.3\ntextract==1.6.4\nTheano-PyMC==1.1.2\nthinc==8.0.17\nthreadpoolctl==3.2.0\nthrift==0.16.0\ntifffile==2023.7.10\ntinycss2==1.2.1\ntoml==0.10.2\ntomli==2.0.1\ntoolz==0.12.0\ntorch==1.10.0\ntorchaudio==0.10.0\ntorchtext==0.6.0\ntorchvision==0.11.1\ntornado==6.4\ntqdm==4.64.0\ntraitlets==5.14.0\ntrimesh==3.9.29\ntyper==0.4.2\ntyping-extensions==4.5.0\ntzlocal==5.2\nujson==5.9.0\nunattended-upgrades==0.1\nurllib3==1.25.8\nuvicorn==0.24.0.post1\nuvloop==0.19.0\nWand==0.6.13\nwasabi==0.10.1\nwatchfiles==0.21.0\nwcwidth==0.2.12\nweasyprint==53.3\nwebencodings==0.5.1\nwebsocket-client==1.7.0\nwebsockets==10.3\nwerkzeug==3.0.1\nwordcloud==1.8.1\nwrapt==1.16.0\nwsproto==1.2.0\nxarray==2023.1.0\nxarray-einstats==0.5.1\nxgboost==1.4.2\nxlrd==1.2.0\nXlsxWriter==3.1.9\nxml-python==0.4.3\nyarl==1.9.4\nzipp==3.17.0\nzopfli==0.2.3\n</code></pre></p>"},{"location":"internals/list_python_libraries/#categorised-list","title":"Categorised List","text":"<pre><code>categorise the list based on functionality\n</code></pre> <p>The list of installed Python libraries can be categorized based on their primary functionality into several groups. Here is a broad classification:</p>"},{"location":"internals/list_python_libraries/#web-development","title":"Web Development","text":"<ul> <li>Flask, Django, FastAPI: Web frameworks for building web applications.</li> <li>Uvicorn, Hypercorn: ASGI servers for running async web applications.</li> <li>aiohttp, httpx: Asynchronous HTTP client/server framework.</li> </ul>"},{"location":"internals/list_python_libraries/#data-science-and-machine-learning","title":"Data Science and Machine Learning","text":"<ul> <li>NumPy, Pandas: Data manipulation and analysis.</li> <li>SciPy: Scientific computing.</li> <li>Matplotlib, Seaborn, Plotly: Data visualization.</li> <li>Scikit-learn: Machine learning.</li> <li>TensorFlow, Keras, PyTorch: Deep learning frameworks.</li> <li>XGBoost: Gradient boosting framework.</li> <li>Statsmodels: Statistical modeling and econometrics.</li> </ul>"},{"location":"internals/list_python_libraries/#natural-language-processing-and-image-processing","title":"Natural Language Processing and Image Processing","text":"<ul> <li>Spacy, NLTK, TextBlob: Natural language processing.</li> <li>OpenCV-Python, Pillow, imageio: Image processing.</li> </ul>"},{"location":"internals/list_python_libraries/#networking-and-communication","title":"Networking and Communication","text":"<ul> <li>Requests, urllib3: HTTP libraries for sending requests.</li> <li>Paramiko, cryptography: Libraries for secure connections and cryptography.</li> </ul>"},{"location":"internals/list_python_libraries/#data-formats-and-serialization","title":"Data Formats and Serialization","text":"<ul> <li>BeautifulSoup4, lxml: HTML and XML parsing.</li> <li>PyYAML, json5: YAML and JSON parsing and serialization.</li> </ul>"},{"location":"internals/list_python_libraries/#scientific-and-numeric-computing","title":"Scientific and Numeric Computing","text":"<ul> <li>SymPy: Symbolic mathematics.</li> <li>Jupyter Notebook, IPython: Interactive computing and development environment.</li> </ul>"},{"location":"internals/list_python_libraries/#database-and-orm","title":"Database and ORM","text":"<ul> <li>SQLAlchemy, Django ORM: Object-relational mapping libraries.</li> <li>SQLite, PostgreSQL: Database connectors and wrappers.</li> </ul>"},{"location":"internals/list_python_libraries/#file-and-data-manipulation","title":"File and Data Manipulation","text":"<ul> <li>Pandas, OpenPyXL, xlrd, XlsxWriter: Reading and writing Excel files.</li> <li>pdfminer.six, PyPDF2: PDF parsing and manipulation.</li> </ul>"},{"location":"internals/list_python_libraries/#audio-and-speech-processing","title":"Audio and Speech Processing","text":"<ul> <li>LibROSA, PyDub, SpeechRecognition: Libraries for audio analysis and speech recognition.</li> </ul>"},{"location":"internals/list_python_libraries/#visualization-and-gui","title":"Visualization and GUI","text":"<ul> <li>Bokeh, Dash: Interactive visualization and dashboard building tools.</li> </ul>"},{"location":"internals/list_python_libraries/#cryptography-and-security","title":"Cryptography and Security","text":"<ul> <li>Cryptography, PyNaCl: Cryptography libraries for secure data encryption.</li> </ul>"},{"location":"internals/list_python_libraries/#categorised-table","title":"Categorised Table","text":"<pre><code>in a markdown table, for all and each of these python libraries, categorise it and add a succinct description of what the library can be used for\n\ntable columns\n- name\n- version\n- category\n- description\n</code></pre> Name Version Category Description absl-py 2.0.0 Utility Offers a set of utility functions for building Python applications affine 2.4.0 Geometry Handles 2D affine transformations aiohttp 3.8.1 Networking Enables handling of http requests in an asynchronous manner aiosignal 1.3.1 Asynchronous Programming Facilitates sending signals and awaiting responses asynchronously analytics-python 1.4.post1 Analytics Allows for tracking of events and sending data to various analytics services anyio 3.7.1 Asynchronous Programming Offers a standard interface for using different asynchronous event loops anytree 2.8.0 Data Structures Facilitates working with tree-like structures argcomplete 1.10.3 Command Line Interface Enables more advanced bash completion features argon2-cffi 23.1.0 Cryptography Implements the Argon2 password hashing algorithm argon2-cffi-bindings 21.2.0 Cryptography Provides bindings for the Argon2 password hashing algorithm arviz 0.15.1 Data Visualization Facilitates visualization of statistical models asn1crypto 1.5.1 Cryptography Implements ASN.1 data structures asttokens 2.4.1 Parsing Allows for easy manipulation of Python source code async-timeout 4.0.3 Asynchronous Programming Implements timeouts in asyncio programs attrs 23.1.0 Utility Simplifies writing classes by providing a way to define attributes audioread 3.0.1 Audio Processing Decodes audio files into raw audio data Babel 2.14.0 Internationalization Assists in internationalizing Python applications backcall 0.2.0 Utility Provides a way to implement function callbacks backoff 1.10.0 Utility Implements function retry and backoff logic backports.zoneinfo 0.2.1 Date and Time Backports the zoneinfo module to earlier Python versions basemap 1.3.2 Data Visualization Creates 2D geographical plots basemap-data 1.3.2 Data Visualization Provides data for the basemap library bcrypt 4.1.2 Cryptography Implements the bcrypt password hashing algorithm beautifulsoup4 4.8.2 Web Scraping Parses HTML and XML documents and provides a searchable structure bleach 6.1.0 Security Sanitizes and escapes text to prevent XSS attacks blinker 1.7.0 Utility Implements a fast dispatching system that allows code to subscribe to events blis 0.7.11 Linear Algebra Implements basic linear algebra subroutines bokeh 2.4.0 Data Visualization Creates interactive and scalable visualizations branca 0.7.0 Data Visualization Creates interactive leaflet maps Brotli 1.1.0 Compression Implements the Brotli compression algorithm cachetools 5.3.2 Caching Provides caching utilities cairocffi 1.6.1 Graphics Interfaces with the Cairo graphics library CairoSVG 2.5.2 Graphics Converts SVG files into other formats camelot-py 0.10.1 Data Extraction Extracts tables from PDF files catalogue 2.0.10 Utility Creates a registry for functions and classes certifi 2019.11.28 Networking Provides Mozilla's CA Bundle for requests cffi 1.16.0 Foreign Function Interface Interfaces with C code from Python chardet 4.0.0 Text Processing Detects the encoding of text charset-normalizer 2.1.1 Text Processing Normalizes the encoding of text click 8.1.7 Command Line Interface Creates beautiful command line interfaces click-plugins 1.1.1 Command Line Interface Provides an extension module for click to enable registering CLI commands via setuptools entry-points cligj 0.7.2 Command Line Interface Creates command line interfaces for GeoJSON cloudpickle 3.0.0 Serialization Serializes Python constructs not supported by the built-in pickle module cmudict 1.0.16 Text Processing Provides a pronunciation dictionary for North American English comm 0.2.0 Communication Facilitates communication between Python and other languages compressed-rtf 1.0.6 Text Processing Decodes compressed RTF strings countryinfo 0.1.2 Data Provides information about countries cryptography 3.4.8 Cryptography Implements cryptographic recipes and primitives cssselect2 0.7.0 Web Scraping Parses CSS3 Selectors and translates them to XPath 1.0 cycler 0.12.1 Data Visualization Provides a way to cycle over a set of colors and styles cymem 2.0.8 Memory Management Manages and tracks memory allocations Cython 0.29.36 Programming Language Translates Python code into C for performance improvements databricks-sql-connector 0.9.1 Database Connects to Databricks SQL endpoints dbus-python 1.2.16 Inter-process Communication Interfaces with the D-Bus message bus system debugpy 1.8.0 Debugging Provides debugging capabilities decorator 4.4.2 Utility Simplifies the syntax for defining decorators defusedxml 0.7.1 Security Provides a safer version of several Python XML libraries deprecat 2.1.1 Utility Provides a way to deprecate old Python classes, functions, and methods dill 0.3.7 Serialization Extends Python's pickle module to support more types distro-info 0.23+ubuntu1.1 System Information Gives information about the OS distribution dlib 19.22.1 Machine Learning Facilitates complex machine learning algorithms dnspython 2.4.2 Networking Enables DNS operations in Python docx2txt 0.8 Text Processing Converts Microsoft .docx files into plain text ebcdic 1.1.1 Text Processing Converts between EBCDIC and ASCII EbookLib 0.18 Ebooks Reads and writes different ebook formats einops 0.3.2 Tensor Operations Provides a flexible syntax for tensor operations email-validator 2.1.0.post1 Validation Validates email addresses according to the rules in RFC 5322 entrypoints 0.4 Packaging Discovers and loads entry points from installed packages et-xmlfile 1.1.0 XML Processing Provides a low memory library for creating large XML files exceptiongroup 1.2.0 Error Handling Provides a way to catch and handle multiple exceptions exchange-calendars 3.4 Finance Provides trading calendars for pandas_market_calendars executing 2.0.1 Debugging Determines which Python frame is executing a function extract-msg 0.28.7 Email Processing Extracts emails and attachments saved in Microsoft Outlook's .msg files Faker 8.13.2 Data Generation Generates fake data such as names, addresses, and email addresses fastapi 0.95.2 Web Framework Enables the quick creation of APIs with minimal code fastjsonschema 2.19.0 Validation Validates JSON objects quickly fastprogress 1.0.3 User Interface Displays progress bars in Jupyter notebooks ffmpeg-python 0.2.0 Multimedia Interfaces with FFmpeg to process audio and video streams ffmpy 0.3.1 Multimedia Provides a simple interface to FFmpeg filelock 3.13.1 File Handling Manages locks on files to prevent concurrent access Fiona 1.8.20 Geospatial Reads and writes geographic data files flask 3.0.0 Web Framework Creates web applications Flask-CacheBuster 1.0.0 Web Development Adds a timestamp to static file paths to prevent caching Flask-Cors 4.0.0 Web Development Handles Cross Origin Resource Sharing in Flask applications Flask-Login 0.6.3 Web Development Manages user sessions for Flask applications folium 0.12.1 Data Visualization Creates interactive maps fonttools 4.47.0 Fonts Manipulates and analyzes font files fpdf 1.7.2 PDF Processing Creates PDF documents frozenlist 1.4.1 Data Structures Implements a list that cannot be modified future 0.18.3 Compatibility Provides support for Python 2/3 compatibility fuzzywuzzy 0.18.0 Text Processing Matches strings using Levenshtein Distance gensim 4.1.0 Machine Learning Models topics and performs semantic analysis geographiclib 1.52 Geospatial Performs calculations related to the shape of the earth geopandas 0.10.2 Data Analysis Extends pandas to allow spatial operations on geometric types geopy 2.2.0 Geospatial Locates the coordinates of addresses, cities, and countries gradio 2.2.15 User Interface Creates UIs for machine learning models graphviz 0.17 Data Visualization Creates graph diagrams gTTS 2.2.3 Text-to-Speech Converts text into speech h11 0.14.0 Networking Implements HTTP/1.1 h2 4.1.0 Networking Implements HTTP/2 h5netcdf 1.1.0 Data Storage Reads and writes netCDF files h5py 3.6.0 Data Storage Reads and writes HDF5 files hpack 4.0.0 Networking Implements HPACK header compression html5lib 1.1 Web Scraping Parses HTML documents httpcore 1.0.2 Networking A minimal HTTP client httptools 0.6.1 Networking Parses HTTP requests/responses httpx 0.25.2 Networking A fully featured HTTP client hypercorn 0.14.3 Web Server An ASGI server hyperframe 6.0.1 Networking Frames for HTTP/2 idna 2.8 Networking Encodes and decodes Internationalized Domain Names imageio 2.33.1 Image Processing Reads and writes a wide range of image data imageio-ffmpeg 0.4.9 Multimedia Provides tools for working with FFMPEG IMAPClient 2.1.0 Email Handles IMAP client operations imgkit 1.2.2 Image Processing Converts HTML to images importlib-metadata 7.0.0 Python Standard Library Accesses the metadata of Python packages importlib-resources 6.1.1 Python Standard Library Reads files within packages iniconfig 2.0.0 Configuration Parses .ini configuration files ipykernel 6.27.1 Jupyter Provides the IPython kernel for Jupyter ipython 8.12.3 Interactive Computing An interactive Python shell ipython-genutils 0.2.0 Utility Helper functions used by IPython isodate 0.6.1 Date and Time Parses and formats ISO 8601 dates itsdangerous 2.1.2 Security Safely passes data to untrusted environments jax 0.2.28 Machine Learning Performs numerical computations jedi 0.19.1 Autocompletion Provides autocompletion and static analysis for Python Jinja2 3.1.2 Templating Creates text templates joblib 1.3.2 Parallel Computing Provides tools for pipelining Python jobs json5 0.9.14 JSON Processing Parses and serializes JSON5 documents jsonpickle 3.0.2 Serialization Serializes complex Python objects to and from JSON jsonschema 4.20.0 Validation Validates JSON documents against a schema jsonschema-specifications 2023.11.2 Validation Provides specifications for the jsonschema library jupyter-client 7.4.9 Jupyter Provides a client for interacting with Jupyter kernels jupyter-core 5.1.3 Jupyter Provides the core functionality of Jupyter projects jupyter-server 1.23.5 Jupyter Provides the backend for Jupyter web applications jupyterlab 3.4.8 Jupyter An interactive development environment for Jupyter notebooks jupyterlab-pygments 0.2.2 Syntax Highlighting Provides syntax highlighting for JupyterLab jupyterlab-server 2.19.0 Jupyter Provides the server for JupyterLab keras 2.6.0 Machine Learning Creates deep learning models kerykeion 2.1.16 Astrology Provides tools for astrological calculations kiwisolver 1.4.5 Optimization Solves systems of equations korean-lunar-calendar 0.3.1 Date and Time Converts between Gregorian and Korean lunar dates librosa 0.8.1 Audio Processing Analyzes and manipulates audio signals llvmlite 0.41.1 Compiler Provides a lightweight LLVM binding for writing JIT compilers loguru 0.5.3 Logging Simplifies Python logging lxml 4.9.3 XML Processing Parses and creates XML and HTML documents markdown2 2.4.12 Text Processing Converts Markdown text to HTML markdownify 0.9.3 Text Processing Converts HTML to Markdown text MarkupSafe 2.1.3 Text Processing Escapes strings for safe inclusion in HTML and XML matplotlib 3.4.3 Data Visualization Creates static, animated, and interactive visualizations matplotlib-inline 0.1.6 Data Visualization Displays matplotlib figures in Jupyter notebooks matplotlib-venn 0.11.6 Data Visualization Creates Venn diagrams mistune 3.0.2 Text Processing Parses Markdown text mizani 0.9.3 Data Visualization Provides a grammar of graphics for Python mne 0.23.4 Neuroscience Analyzes neurophysiological data monotonic 1.6 Time Provides a monotonic clock moviepy 1.0.3 Multimedia Edits and composes movie files mpmath 1.3.0 Mathematics Performs arbitrary-precision arithmetic mtcnn 0.1.1 Machine Learning Detects faces in images multidict 6.0.4 Data Structures Manages dictionaries with multiple values per key munch 4.0.0 Data Structures Provides dictionary objects that support attribute-style access murmurhash 1.0.10 Hashing Implements the MurmurHash family of non-cryptographic hash functions mutagen 1.45.1 Multimedia Manipulates audio metadata nashpy 0.0.35 Game Theory Analyzes finite, two-player games nbclassic 0.4.5 Jupyter Provides the classic Jupyter notebook interface nbclient 0.9.0 Jupyter Executes notebooks nbconvert 7.13.0 Jupyter Converts notebooks to other formats nbformat 5.9.2 Jupyter Reads and writes notebook files nest-asyncio 1.5.8 Asynchronous Programming Makes asyncio.run() compatible with Jupyter networkx 2.6.3 Data Structures Creates and manipulates complex networks nltk 3.6.3 Natural Language Processing Analyzes human language data notebook 6.5.1 Jupyter Provides the Jupyter notebook web application notebook-shim 0.2.3 Jupyter Provides a shim for the Jupyter notebook numba 0.58.1 Compiler Translates a subset of Python and NumPy code into fast machine code numexpr 2.8.6 Mathematics Evaluates multiple-operator array expressions numpy 1.21.2 Mathematics Performs numerical operations on large, multi-dimensional arrays and matrices numpy-financial 1.0.0 Finance Provides financial functions odfpy 1.4.1 Office Documents Manipulates OpenDocument files olefile 0.47 File Formats Reads and writes Microsoft OLE2 files opencv-python 4.5.2.54 Image Processing Processes images and performs computer vision tasks openpyxl 3.0.10 Office Documents Reads and writes Excel 2010 xlsx/xlsm/xltx/xltm files opt-einsum 3.3.0 Mathematics Optimizes contraction order for einsum-like expressions orjson 3.9.10 JSON Processing Serializes and deserializes JSON oscrypto 1.3.0 Cryptography Performs cryptographic operations packaging 23.2 Packaging Handles versions and requirements for Python packages pandas 1.3.2 Data Analysis Analyzes and manipulates numerical tables and time series pandocfilters 1.5.0 Text Processing Manipulates pandoc documents paramiko 3.4.0 Networking Implements the SSHv2 protocol parso 0.8.3 Parsing Parses Python source code pathy 0.10.3 File Handling Handles files and directories on different cloud storage providers patsy 0.5.4 Statistics Describes statistical models and builds design matrices pdf2image 1.16.3 PDF Processing Converts PDF files into images pdfkit 0.6.1 PDF Processing Converts HTML to PDF pdfminer.six 20191110 PDF Processing Extracts text, images, and metadata from PDF files pdfplumber 0.5.28 PDF Processing Extracts text, tables, and metadata from PDF files pdfrw 0.4 PDF Processing Reads and writes PDF files pexpect 4.9.0 Command Line Interface Automates interactive applications pickleshare 0.7.5 Data Storage Implements a small 'shelve'-like datastore with concurrency support Pillow 8.3.2 Image Processing Adds image processing capabilities to Python pip 20.0.2 Packaging Installs Python packages pkgutil-resolve-name 1.3.10 Packaging Resolves Python package names platformdirs 4.1.0 File Handling Provides platform-specific directories plotly 5.3.0 Data Visualization Creates interactive plots plotnine 0.10.1 Data Visualization Provides a grammar of graphics for Python pluggy 1.3.0 Plugin Management Manages plugins for Python applications pooch 1.8.0 Data Management Manages and fetches data files preshed 3.0.9 Hashing Implements a Cython hash table priority 2.0.0 Networking Implements the priority logic for HTTP/2 proglog 0.1.10 Logging Provides a customizable progress bar prometheus-client 0.19.0 Monitoring Implements a Prometheus monitoring client prompt-toolkit 3.0.43 Command Line Interface Creates interactive command line applications pronouncing 0.2.0 Text Processing Uses the CMU Pronouncing Dictionary psutil 5.9.7 System Information Provides information on running processes and system utilization ptyprocess 0.7.0 Command Line Interface Runs a subprocess in a pseudo terminal pure-eval 0.2.2 Debugging Safely evaluates Python expressions py 1.11.0 Testing Provides a development and testing framework PyAudio 0.2.11 Audio Processing Records and plays audio pycountry 20.7.3 Data Provides ISO country, subdivision, language, currency, and script definitions pycparser 2.21 Parsing Parses C code pycryptodome 3.19.0 Cryptography Performs cryptographic operations pycryptodomex 3.19.0 Cryptography A self-contained cryptographic library pydantic 1.10.2 Data Validation Validates data types and structures pydot 1.4.2 Data Visualization Creates graph diagrams pydub 0.25.1 Audio Processing Manipulates audio files pydyf 0.8.0 PDF Processing Creates PDF files pygments 2.17.2 Syntax Highlighting Highlights syntax in source code PyGObject 3.36.0 GUI Provides Python bindings for the GObject library pygraphviz 1.7 Data Visualization Interfaces with Graphviz PyJWT 2.8.0 Security Encodes and decodes JSON Web Tokens pylog 1.1 Logging Provides a logging framework pyluach 2.2.0 Date and Time Provides Hebrew calendar dates, times, and Torah readings pymc3 3.11.5 Statistics Performs Bayesian statistical modeling and Probabilistic Machine Learning PyMuPDF 1.19.6 PDF Processing Reads and writes PDF, EPUB, and other formats PyNaCl 1.5.0 Cryptography Implements NaCl (Networking and Cryptography library) pyOpenSSL 21.0.0 Cryptography Interfaces with the OpenSSL library pypandoc 1.6.3 Text Processing Converts files from one markup format to another pyparsing 3.1.1 Parsing Parses text using a specification-based approach PyPDF2 1.28.6 PDF Processing Reads and writes PDF files pyphen 0.14.0 Text Processing Hyphenates text pyproj 3.5.0 Geospatial Performs cartographic transformations and geodetic computations pyprover 0.5.6 Mathematics Proves logical statements pyshp 2.1.3 Geospatial Reads and writes ESRI Shapefile format pyswisseph 2.10.3.2 Astronomy Provides high precision astronomy computations pytesseract 0.3.8 Optical Character Recognition Recognizes text in images pytest 6.2.5 Testing Provides a full-featured testing toolset pyth3 0.7 Mathematics Provides a Python interface to the TH3 library python-apt 2.0.1+ubuntu0.20.4.1 Package Management Interfaces with the APT package manager python-dateutil 2.8.2 Date and Time Provides extensions to the standard Python datetime module python-docx 0.8.11 Office Documents Reads, queries, and modifies Microsoft Word 2007/2008 docx files python-dotenv 1.0.0 Configuration Reads .env files python-multipart 0.0.6 Web Development Parses multipart/form-data python-pptx 0.6.21 Office Documents Reads, queries, and modifies Microsoft PowerPoint 2007/2008 pptx files pyttsx3 2.90 Text-to-Speech Converts text to speech pytz 2023.3.post1 Date and Time Provides world timezone definitions PyWavelets 1.4.1 Signal Processing Performs wavelet transformations pyxlsb 1.0.8 Office Documents Reads Excel 2007-2019 Binary files PyYAML 6.0.1 Data Serialization Parses and generates YAML data pyzbar 0.1.8 Barcode Processing Decodes barcodes in images pyzmq 25.1.2 Networking Provides Python bindings for ZeroMQ qrcode 7.3 Barcode Processing Generates QR codes rarfile 4.0 File Formats Reads RAR archive files rasterio 1.2.10 Geospatial Reads and writes geospatial raster datasets rdflib 6.0.0 Data Parses and serializes RDF graphs referencing 0.32.0 Citations Manages bibliographic references regex 2023.10.3 Text Processing Performs regular expression operations reportlab 3.6.1 PDF Processing Creates PDF documents requests 2.31.0 Networking Sends HTTP requests requests-unixsocket 0.2.0 Networking Sends HTTP requests over a UNIX domain socket resampy 0.4.2 Signal Processing Resamples audio signals rpds-py 0.15.2 Data Structures Provides persistent data structures scikit-image 0.18.3 Image Processing Performs image processing operations scikit-learn 1.0 Machine Learning Performs machine learning operations scipy 1.7.1 Mathematics Performs scientific computations seaborn 0.11.2 Data Visualization Creates statistical graphics semver 3.0.2 Version Control Handles semantic versioning Send2Trash 1.8.2 File Handling Sends files to the Trash or Recycle Bin sentencepiece 0.1.99 Text Processing Performs unsupervised text tokenizer and detokenizer setuptools 45.2.0 Packaging Manages Python package installations shap 0.39.0 Machine Learning Explains the output of machine learning models Shapely 1.7.1 Geometry Manipulates and analyzes planar geometric objects six 1.14.0 Compatibility Provides Python 2 and 3 compatibility slicer 0.0.7 Machine Learning Visualizes the effects of machine learning models smart-open 6.4.0 File Handling Opens files from local and remote filesystems sniffio 1.3.0 Networking Detects the async library in use snowflake-connector-python 2.7.12 Database Connects to Snowflake databases snuggs 1.4.7 Mathematics Evaluates s-expressions sortedcontainers 2.4.0 Data Structures Provides sorted collections SoundFile 0.10.2 Audio Processing Reads and writes sound files soupsieve 2.5 Web Scraping Selects elements from parsed HTML spacy 3.1.6 Natural Language Processing Analyzes and understands natural language spacy-legacy 3.0.12 Natural Language Processing Provides legacy support for spaCy SpeechRecognition 3.8.1 Speech Recognition Recognizes speech srsly 2.4.8 Data Serialization Serializes data stack-data 0.6.3 Debugging Accesses stack data starlette 0.27.0 Web Framework Provides a lightweight ASGI framework statsmodels 0.13.1 Statistics Performs statistical computations svglib 1.1.0 Graphics Reads SVG files svgwrite 1.4.1 Graphics Writes SVG files sympy 1.8 Mathematics Performs symbolic mathematics tables 3.6.1 Data Storage Manages hierarchical datasets tabula 1.0.5 Data Extraction Extracts tables from PDF files tabulate 0.8.9 Data Presentation Formats tabular data tenacity 8.2.3 Utility Retries operations terminado 0.18.0 Terminal Emulator Provides terminal instances on demand text-unidecode 1.3 Text Processing Transliterates Unicode text into ASCII textblob 0.15.3 Natural Language Processing Processes textual data textract 1.6.4 Text Extraction Extracts text from various document types Theano-PyMC 1.1.2 Machine Learning Optimizes and evaluates mathematical expressions thinc 8.0.17 Machine Learning Manages machine learning workflows threadpoolctl 3.2.0 Parallel Computing Controls the number of threads used in parallel computing libraries thrift 0.16.0 Serialization Provides a framework for scalable cross-language services development tifffile 2023.7.10 Image Processing Reads and writes TIFF files tinycss2 1.2.1 Web Development Parses and serializes CSS toml 0.10.2 Configuration Parses and creates TOML files tomli 2.0.1 Configuration Parses TOML files toolz 0.12.0 Functional Programming Provides a set of utility functions for iterators, functions, and dictionaries torch 1.10.0 Machine Learning Provides a deep learning framework torchaudio 0.10.0 Audio Processing Provides audio signal processing transforms torchtext 0.6.0 Natural Language Processing Provides text processing utilities torchvision 0.11.1 Machine Learning Provides tools for vision research tornado 6.4 Web Framework Provides a web framework and asynchronous networking library tqdm 4.64.0 User Interface Provides a fast, extensible progress bar traitlets 5.14.0 Configuration Configures applications and creates declarative classes trimesh 3.9.29 Geometry Loads and uses triangular meshes typer 0.4.2 Command Line Interface Creates command line interfaces typing-extensions 4.5.0 Compatibility Provides additional standard Python typing constructs tzlocal 5.2 Date and Time Provides a function that returns a tzinfo object with the local timezone ujson 5.9.0 JSON Processing Encodes and decodes JSON really fast unattended-upgrades 0.1 System Administration Upgrades packages automatically urllib3 1.25.8 Networking Provides a powerful, sanity-friendly HTTP client uvicorn 0.24.0.post1 Web Server Provides an ASGI server uvloop 0.19.0 Networking Provides a fast, drop-in replacement of the built-in asyncio event loop Wand 0.6.13 Image Processing Provides a simple ctypes-based interface to ImageMagick wasabi 0.10.1 User Interface Provides a small utility for console printing watchfiles 0.21.0 File Handling Watches file modifications wcwidth 0.2.12 Text Processing Measures the number of terminal column cells of wide-character codes weasyprint 53.3 PDF Processing Converts HTML/CSS documents to PDF webencodings 0.5.1 Text Processing Encodes and decodes character sets for the web websocket-client 1.7.0 Networking Provides low level APIs for WebSocket usage websockets 10.3 Networking Provides an implementation of the WebSocket Protocol werkzeug 3.0.1 Web Development Provides a WSGI utility library wheel 0.34.2 Packaging Builds Python wheel packages wordcloud 1.8.1 Data Visualization Creates word cloud images wrapt 1.16.0 Utility Provides a module for decorators, wrappers and monkey patching wsproto 1.2.0 Networking Provides a pure Python implementation of a WebSocket protocol stack xarray 2023.1.0 Data Analysis Provides N-D labeled arrays and datasets xarray-einstats 0.5.1 Data Analysis Provides statistical functions for xarray xgboost 1.4.2 Machine Learning Provides a gradient boosting framework xlrd 1.2.0 Office Documents Reads Excel files XlsxWriter 3.1.9 Office Documents Writes Excel files xml-python 0.4.3 XML Processing Parses and creates XML documents yarl 1.9.4 Networking Constructs and dissects URLs zipp 3.17.0 Utility Provides a backport of pathlib-compatible object wrapper for zip files zopfli 0.2.3 Compression Provides bindings to the zopfli compressor"},{"location":"tricks/running_your_own_code/","title":"Running your own code","text":"<p>Upload a python file and have ChatGPT run it for you.</p> <p>eg </p> divisors.py<pre><code># Define a list of mixed data types including numbers and a string\nnumbers = [10, 15, 22, -5, 30, 45, 60]\n\n# Set the divisor to 10 for divisibility check\ndivisor = 5\n\n# Initialize lists to store categorized numbers\neven_numbers = []\nodd_numbers = []\ndivisible_by_divisor = []\n\n# Loop through each item in the numbers list\nfor number in numbers:\n    try:\n        # Ignore negative numbers by continuing to the next iteration\n        if number &lt; 0:\n            continue\n\n        # Check if the number is even or odd and append to respective list\n        if number % 2 == 0:\n            even_numbers.append(number)\n        else:\n            odd_numbers.append(number)\n\n\n        # Check if the number is divisible by the specified divisor\n        if number % divisor == 0:\n            divisible_by_divisor.append(number)\n    except TypeError:\n        # Handle non-numeric values gracefully\n        print(f\"Non-numeric value encountered: {number}\")\n        pass\n\n\nprint(f\"Even numbers: {even_numbers}\")\nprint(f\"Odd numbers: {odd_numbers}\")\nprint(f\"Numbers divisible by {divisor}: {divisible_by_divisor}\")\n</code></pre> <pre><code>show only the results, in json format, of executing this script: divisors.py \n</code></pre> output<pre><code>{\n  \"even_numbers\": [10, 22, 30, 60],\n  \"odd_numbers\": [15, 45],\n  \"divisible_by_divisor\": [10, 15, 30, 45, 60]\n}\n</code></pre>"},{"location":"tricks/updating_code/","title":"Updating Code","text":"<p>Yup, ChatGPT can update the code files that you have uploaded. eg</p> <p>See original divisor.py</p> <pre><code>update the code in divisor.py to be a function\n</code></pre> <p>Updated file:</p> <p>ChatGPT</p> <p>I have updated the code in misc.py to define a function that categorizes numbers from a given list into even, odd, and those divisible by a specified divisor, while handling negative numbers and non-numeric values gracefully.</p> divisors.py<pre><code>def categorize_numbers(numbers, divisor):\n    # Initialize lists to store categorized numbers\n    even_numbers = []\n    odd_numbers = []\n    divisible_by_divisor = []\n\n    # Loop through each item in the numbers list\n    for number in numbers:\n        try:\n            # Ignore negative numbers by continuing to the next iteration\n            if number &lt; 0:\n                continue\n\n            # Check if the number is even or odd and append to respective list\n            if number % 2 == 0:\n                even_numbers.append(number)\n            else:\n                odd_numbers.append(number)\n\n            # Check if the number is divisible by the specified divisor\n            if number % divisor == 0:\n                divisible_by_divisor.append(number)\n        except TypeError:\n            # Handle non-numeric values gracefully\n            print(f\"Non-numeric value encountered: {number}\")\n            pass\n\n    return even_numbers, odd_numbers, divisible_by_divisor\n</code></pre>"}]}